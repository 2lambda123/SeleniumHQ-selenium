module Selenium
  module WebDriver
    #
    # @example Enable full logging
    #   Selenium::WebDriver.logger.level = :debug
    #
    # @example Log to file
    #   Selenium::WebDriver.logger.output = 'selenium.log'
    #
    # @example Use logger manually
    #   Selenium::WebDriver.logger.info('This is info message')
    #   Selenium::WebDriver.logger.warn('This is warning message')
    #
    class Logger
      extend Forwardable

      #
      # @param [String] progname Allow child projects to use Selenium's Logger pattern
      #
      def initialize: (?::String progname, ?default_level: untyped? default_level, ?ignored: untyped? ignored, ?allowed: untyped? allowed) -> void

      def level=: (untyped level) -> untyped

      #
      # Changes logger output to a new IO.
      #
      # @param [String] io
      #
      def output=: (untyped io) -> untyped

      #
      # Returns IO object used by logger internally.
      #
      # Normally, we would have never needed it, but we want to
      # use it as IO object for all child processes to ensure their
      # output is redirected there.
      #
      # It is only used in debug level, in other cases output is suppressed.
      #
      # @api private
      #
      def io: () -> untyped

      #
      # Will not log the provided ID.
      #
      # @param [Array, Symbol] ids
      #
      def ignore: (*untyped ids) -> untyped

      #
      # Will only log the provided ID.
      #
      # @param [Array, Symbol] ids
      #
      def allow: (untyped ids) -> untyped

      #
      # Used to supply information of interest for debugging a problem
      # Overrides default #debug to skip ignored messages by provided id
      #
      # @param [String] message
      # @param [Symbol, Array<Sybmol>] id
      # @yield see #deprecate
      #
      def debug: (untyped message, ?id: untyped id) { () -> untyped } -> untyped

      #
      # Used to supply information of general interest
      #
      # @param [String] message
      # @param [Symbol, Array<Sybmol>] id
      # @yield see #deprecate
      #
      def info: (untyped message, ?id: untyped id) { () -> untyped } -> untyped

      #
      # Used to supply information that suggests an error occurred
      #
      # @param [String] message
      # @param [Symbol, Array<Sybmol>] id
      # @yield see #deprecate
      #
      def error: (untyped message, ?id: untyped id) { () -> untyped } -> untyped

      #
      # Used to supply information that suggests action be taken by user
      #
      # @param [String] message
      # @param [Symbol, Array<Sybmol>] id
      # @yield see #deprecate
      #
      def warn: (untyped message, ?id: untyped id) { () -> untyped } -> untyped

      #
      # Marks code as deprecated with/without replacement.
      #
      # @param [String] old
      # @param [String, nil] new
      # @param [Symbol, Array<Symbol>] id
      # @param [String] reference
      # @yield appends additional message to end of provided template
      #
      def deprecate: (untyped old, ?untyped? new, ?id: untyped id, ?reference: ::String reference) { () -> untyped } -> (nil | untyped)

      private

      def create_logger: (untyped name, level: untyped level) -> untyped

      def discard_or_log: (untyped level, untyped message, untyped id) { () -> untyped } -> (nil | untyped)
    end
  end
end
