# frozen_string_literal: true

# Licensed to the Software Freedom Conservancy (SFC) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The SFC licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This file is automatically generated. Any changes will be lost!

module Selenium
  module WebDriver
    class BiDi
      class Log

        EVENTS = {
          entry_added: 'entryAdded'
        }.freeze

        KINDS = %i[generic console javascript].freeze

        def initialize(bidi)
          @bidi = bidi
        end

        def on_log_event(kind, &block)
          raise Error::WebDriverError, "Don't know how to handle #{kind} events" unless KINDS.include?(kind)

          enabled = log_listeners[kind].any?
          log_listeners[kind] << block
          return if enabled

          on(:entry_added) do |params|
            type = params["type"]

            case type
            when "console"
              __send__(:console_log_events, params)
            when "javascript"
              __send__(:javascript_log_events, params)
            else
              __send__("#{kind}_log_events")
            end
          end
        end


        private

        def on(event, &block)
          event = EVENTS[event] if event.is_a?(Symbol)
          @bidi.callbacks["log.#{event}"] << block
        end

        def log_listeners
          @log_listeners ||= Hash.new { |listeners, kind| listeners[kind] = [] }
        end

        def console_log_events(params)
          event = BiDi::ConsoleLogEntry.new(
            level: params['level'],
            text: params['text'],
            timestamp: params['timestamp'],
            type: params['type'],
            method: params['method'],
            args: params['args']
          )
          log_listeners[:console].each do |listener|
            listener.call(event)
          end
        end

        def javascript_log_events(params)
          event = BiDi::JavascriptLogEntry.new(
            level: params['level'],
            text: params['text'],
            timestamp: params['timestamp'],
            type: params['type'],
            method: params['method'],
            args: params['args']
          )
          log_listeners[:javascript].each do |listener|
            listener.call(event)
          end
        end

      end # Log
    end # Bidi
  end #
end # Selenium
