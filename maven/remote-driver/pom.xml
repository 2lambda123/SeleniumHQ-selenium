<?xml version="1.0" encoding="Windows-1252"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-parent</artifactId>
        <version>2.0-SNAPSHOT</version>
    </parent>
    <artifactId>selenium-remote-driver</artifactId>
    <name>selenium-remote-driver</name>

    <dependencies>
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib-nodep</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-api</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-exec</artifactId>
        </dependency>
           <dependency>
                <groupId>net.java.dev.jna</groupId>
                <artifactId>jna</artifactId>
            </dependency>
            <dependency>
              <groupId>net.java.dev.jna</groupId>
              <artifactId>jna-platform</artifactId>
            </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- See http://maven.apache.org/plugins/maven-antrun-plugin -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy_java_files</id>
                        <phase>generate-sources</phase>
                        <configuration>
                            <tasks>
                                <delete dir="src/main/java" />
                                <copy todir="src/main/java" includeEmptyDirs="false">
                                    <fileset dir="../../java/client/src">
                                        <include name="org/openqa/selenium/browserlaunchers/**/*.java" />
                                        <include name="org/openqa/selenium/io/**/*.java" />
                                        <include name="org/openqa/selenium/mobile/**/*.java" />
                                        <include name="org/openqa/selenium/os/**/*.java" />
                                        <include name="org/openqa/selenium/net/**/*.java" />
                                        <include name="org/openqa/selenium/profiler/**/*.java" />
                                        <include name="org/openqa/selenium/remote/**/*.java" />
                                        <not><present targetdir="../api/src/main/java" /></not>
                                    </fileset>
                                </copy>
                                <!-- copy the META-INF/p2.inf file to the right place so it gets included in the jar -->
                                <delete dir="src/main/resources" />
                                <copy todir="src/main/resources/META-INF" includeEmptyDirs="false">
                                    <fileset dir=".">
                                        <include name="p2.inf" />
                                    </fileset>
                                </copy>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- See http://maven.apache.org/plugins/maven-jar-plugin -->
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <!-- http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html -->
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>2.5.0</version>
                <configuration>
                    <instructions>
                        <!-- specify jna as a required bundle to make the package containing the jnidispatch native library 
                             visible to the classloader of this bundle.  Used by ProcessUtils#killWinProcess to stop the browser
                             process in windows.  Optional as jna is not used for non win32 platforms -->
                        <Require-Bundle>com.sun.jna;bundle-version="4.1.0";resolution:=optional</Require-Bundle>
                        <!-- fix the version number range for the some imports since we are not compiling against the version
                             of that artifact that is packaged as an OSGi bundle (i.e. httpclient-osgi). 
                             The exported package version numbers are not auto-discovered for those imports, but we can correct that here. 
                             The jna packages are only required on win32 so marked as optional here. -->
                        <Import-Package>com.sun.jna.*;resolution:=optional,org.apache.http.*;version="[4.3,5)",*</Import-Package>
                        <Export-Package>*;version=${version}</Export-Package>

                        <!-- 
                           NOTE: There is a split package in these selenium bundles:
                              1. org.seleniumhq.selenium.api
                              2. org.seleniumhq.selenium.remote.driver
                           As they both export this package:
                              1. org.openqa.selenium.remote

                           Workaround that split package problem by making this a fragment bundle of the selenium-api host bundle
                           so those two bundles will share the same classloader.
                        -->
                        <Fragment-Host>org.seleniumhq.selenium.api</Fragment-Host>
                    </instructions>
                </configuration>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
